@page "/WorkEntries"
@inherits DataComponent

<h3>Work Entries</h3>

@if (gridHelper is null) return;

<div class="d-flex align-items-center">
	<label class="me-3">
		Customer:
		<RadzenDropDown @bind-Value="gridHelper.CustomerId" Data="customers" ValueProperty="Id" TextProperty="Name" />
	</label>

	<label>
		Project:
		<RadzenDropDown @bind-Value="gridHelper.ProjectId" Data="projects[gridHelper.CustomerId]" ValueProperty="Id" TextProperty="Name" />
	</label>
</div>

<GridInsertButton Grid="grid" OnCreateItem="() => new WorkEntry() { Date = DateTime.Today, ProjectId = gridHelper.ProjectId }" />

<RadzenGrid @ref="grid" Data="gridHelper.Data" TItem="WorkEntry" RowCreate="gridHelper.SaveRowAsync" RowUpdate="gridHelper.SaveRowAsync">
	<Columns>
		<RadzenGridColumn TItem="WorkEntry" Title="Date" Property="Date" Format="ddd M/d">
			<EditTemplate>
				<RadzenDatePicker @bind-Value="context.Date" />
			</EditTemplate>
		</RadzenGridColumn>
		<RadzenGridColumn TItem="WorkEntry" Title="Comments" Property="Comments">
			<EditTemplate>
				<RadzenTextBox @bind-Value="context.Comments" />
			</EditTemplate>
		</RadzenGridColumn>
		<RadzenGridColumn TItem="WorkEntry" Title="Hours" Property="Hours" Format="n2">
			<EditTemplate>
				<RadzenNumeric @bind-Value="context.Hours" />
			</EditTemplate>
		</RadzenGridColumn>
		<GridControls Grid="grid" DeletingRow="gridHelper.DeleteRowAsync" TItem="WorkEntry" />
	</Columns>
</RadzenGrid>

@code {
	private RadzenGrid<WorkEntry>? grid;
	private WorkEntryGridHelper? gridHelper;
	private IEnumerable<Customer> customers = [];
	private ILookup<int, Project> projects = Enumerable.Empty<Project>().ToLookup(row => row.CustomerId);

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		gridHelper = new(Dialog, Data);
		customers = await Data.QueryAsync(new MyCustomers());
		projects = (await Data.QueryAsync(new MyProjects())).ToLookup(row => row.CustomerId);
	}
}
